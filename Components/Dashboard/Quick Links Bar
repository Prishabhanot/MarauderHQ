
import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { ExternalLink, Pin, PinOff } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

const QUICK_LINKS = [
  { name: "Avenue", href: "https://avenue.mcmaster.ca", icon: "📚", color: "from-blue-500 to-blue-600" },
  { name: "Mosaic", href: "https://mosaic.mcmaster.ca", icon: "🎓", color: "from-purple-500 to-purple-600" },
  { name: "MacMail", href: "https://mail.mcmaster.ca", icon: "📧", color: "from-red-500 to-red-600" },
  { name: "OscarPlus", href: "https://oscarplusmcmaster.ca", icon: "🎟️", color: "from-green-500 to-green-600" },
  { name: "Library", href: "https://library.mcmaster.ca", icon: "📖", color: "from-indigo-500 to-indigo-600" },
  { name: "Wellness", href: "https://wellness.mcmaster.ca", icon: "💚", color: "from-teal-500 to-teal-600" },
  { name: "Campus Map", href: "https://maps.mcmaster.ca", icon: "🗺️", color: "from-orange-500 to-orange-600" },
  { name: "Academic Advisors", href: "https://registrar.mcmaster.ca/resources/advising/", icon: "👨‍🏫", color: "from-pink-500 to-pink-600" },
  { name: "Career Services", href: "https://studentsuccess.mcmaster.ca/career-services/", icon: "💼", color: "from-cyan-500 to-cyan-600" },
  { name: "McMaster Store", href: "https://campusstore.mcmaster.ca", icon: "🛍️", color: "from-rose-500 to-rose-600" },
  { name: "MSU Website", href: "https://msumcmaster.ca", icon: "🏛️", color: "from-violet-500 to-violet-600" },
];

export default function QuickLinksGrid({ searchTerm = "" }) {
  const [pinnedLinks, setPinnedLinks] = useState([]);

  useEffect(() => {
    const stored = localStorage.getItem("machub_favs");
    if (stored) {
      try {
        setPinnedLinks(JSON.parse(stored));
      } catch (e) {
        console.error("Failed to parse favorites");
      }
    }
  }, []);

  const togglePin = (name) => {
    const updated = pinnedLinks.includes(name)
      ? pinnedLinks.filter((n) => n !== name)
      : [...pinnedLinks, name];
    setPinnedLinks(updated);
    localStorage.setItem("machub_favs", JSON.stringify(updated));
  };

  const filtered = QUICK_LINKS.filter(
    (link) =>
      !searchTerm || link.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const sorted = [...filtered].sort((a, b) => {
    const aPinned = pinnedLinks.includes(a.name);
    const bPinned = pinnedLinks.includes(b.name);
    if (aPinned && !bPinned) return -1;
    if (!aPinned && bPinned) return 1;
    return 0;
  });

  return (
    <div className="bg-white rounded-3xl border border-gray-200 p-6 shadow-xl">
      <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-2">
        <span>⚡</span> Quick Links
      </h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
        <AnimatePresence>
          {sorted.map((link) => {
            const isPinned = pinnedLinks.includes(link.name);
            return (
              <motion.div
                key={link.name}
                layout
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                className="relative group"
              >
                <a
                  href={link.href}
                  target="_blank"
                  rel="noreferrer"
                  className={`block p-4 rounded-2xl transition-all transform hover:scale-105 hover:shadow-xl ${
                    isPinned
                      ? "bg-gradient-to-br " + link.color + " shadow-lg"
                      : "bg-gray-50 hover:bg-gray-100 border border-gray-200"
                  }`}
                >
                  <div className="text-center">
                    <div className="text-4xl mb-2">{link.icon}</div>
                    <p className={`text-sm font-semibold mb-1 ${isPinned ? "text-white" : "text-gray-900"}`}>
                      {link.name}
                    </p>
                    <ExternalLink className={`w-3 h-3 mx-auto ${isPinned ? "text-white/80" : "text-gray-400"}`} />
                  </div>
                </a>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => togglePin(link.name)}
                  className="absolute -top-2 -right-2 w-8 h-8 p-0 rounded-full bg-white shadow-md opacity-0 group-hover:opacity-100 transition-opacity hover:bg-gray-100 border border-gray-200"
                >
                  {isPinned ? (
                    <PinOff className="w-3 h-3 text-gray-700" />
                  ) : (
                    <Pin className="w-3 h-3 text-gray-700" />
                  )}
                </Button>
              </motion.div>
            );
          })}
        </AnimatePresence>
      </div>
    </div>
  );
}
