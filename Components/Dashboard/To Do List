import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { CheckSquare, Plus, Trash2, Calendar as CalendarIcon } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { format } from "date-fns";

export default function TodoList() {
  const [newTodo, setNewTodo] = useState("");
  const [newDueDate, setNewDueDate] = useState("");
  const queryClient = useQueryClient();

  const { data: todos, isLoading } = useQuery({
    queryKey: ['todos'],
    queryFn: () => base44.entities.TodoItem.list("-created_date"),
    initialData: [],
  });

  const createMutation = useMutation({
    mutationFn: (todoData) => base44.entities.TodoItem.create(todoData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['todos'] });
      setNewTodo("");
      setNewDueDate("");
    },
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, data }) => base44.entities.TodoItem.update(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['todos'] });
    },
  });

  const deleteMutation = useMutation({
    mutationFn: (id) => base44.entities.TodoItem.delete(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['todos'] });
    },
  });

  const handleAdd = () => {
    if (!newTodo.trim()) return;
    createMutation.mutate({
      title: newTodo,
      completed: false,
      due_date: newDueDate || undefined,
      priority: "medium",
    });
  };

  const toggleComplete = (todo) => {
    updateMutation.mutate({
      id: todo.id,
      data: { completed: !todo.completed },
    });
  };

  const incompleteTodos = todos.filter(t => !t.completed);
  const completedTodos = todos.filter(t => t.completed);

  return (
    <Card className="shadow-lg border-gray-200">
      <CardHeader className="border-b border-gray-100 bg-gradient-to-r from-indigo-50/50 to-purple-50/30">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <CheckSquare className="w-5 h-5 text-indigo-600" />
            <CardTitle className="text-lg">My Tasks</CardTitle>
            <Badge variant="secondary" className="bg-indigo-100 text-indigo-800">
              {incompleteTodos.length}
            </Badge>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-6">
        {/* Add New Todo */}
        <div className="space-y-3 mb-4 pb-4 border-b border-gray-200">
          <Input
            placeholder="What needs to be done?"
            value={newTodo}
            onChange={(e) => setNewTodo(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && handleAdd()}
            className="border-gray-200"
          />
          <div className="flex gap-2">
            <Input
              type="date"
              value={newDueDate}
              onChange={(e) => setNewDueDate(e.target.value)}
              className="flex-1 border-gray-200"
            />
            <Button
              onClick={handleAdd}
              disabled={!newTodo.trim() || createMutation.isPending}
              className="bg-indigo-600 hover:bg-indigo-700"
            >
              <Plus className="w-4 h-4 mr-2" />
              Add
            </Button>
          </div>
        </div>

        {/* Todo List */}
        <div className="space-y-4 max-h-96 overflow-y-auto">
          {/* Incomplete Todos */}
          {incompleteTodos.length > 0 && (
            <div>
              <h4 className="text-xs font-medium text-gray-500 uppercase mb-2">
                To Do
              </h4>
              <div className="space-y-2">
                <AnimatePresence>
                  {incompleteTodos.map((todo) => (
                    <motion.div
                      key={todo.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: 20 }}
                      className="flex items-start gap-3 p-3 bg-white border border-gray-200 rounded-lg hover:shadow-md transition-shadow"
                    >
                      <Checkbox
                        checked={todo.completed}
                        onCheckedChange={() => toggleComplete(todo)}
                        className="mt-0.5"
                      />
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-gray-900">
                          {todo.title}
                        </p>
                        {todo.due_date && (
                          <div className="flex items-center gap-1 mt-1">
                            <CalendarIcon className="w-3 h-3 text-gray-400" />
                            <span className="text-xs text-gray-500">
                              {format(new Date(todo.due_date), "MMM d, yyyy")}
                            </span>
                          </div>
                        )}
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => deleteMutation.mutate(todo.id)}
                        disabled={deleteMutation.isPending}
                      >
                        <Trash2 className="w-4 h-4 text-gray-400 hover:text-red-500" />
                      </Button>
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            </div>
          )}

          {/* Completed Todos */}
          {completedTodos.length > 0 && (
            <div>
              <h4 className="text-xs font-medium text-gray-500 uppercase mb-2">
                Completed
              </h4>
              <div className="space-y-2">
                <AnimatePresence>
                  {completedTodos.map((todo) => (
                    <motion.div
                      key={todo.id}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      className="flex items-start gap-3 p-3 bg-gray-50 border border-gray-200 rounded-lg"
                    >
                      <Checkbox
                        checked={todo.completed}
                        onCheckedChange={() => toggleComplete(todo)}
                        className="mt-0.5"
                      />
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-gray-500 line-through">
                          {todo.title}
                        </p>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => deleteMutation.mutate(todo.id)}
                        disabled={deleteMutation.isPending}
                      >
                        <Trash2 className="w-4 h-4 text-gray-400" />
                      </Button>
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            </div>
          )}

          {todos.length === 0 && !isLoading && (
            <div className="text-center py-8 text-gray-500 text-sm">
              <CheckSquare className="w-12 h-12 mx-auto mb-3 text-gray-300" />
              <p>No tasks yet. Add your first todo!</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}